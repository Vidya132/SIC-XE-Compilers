Terminals unused in grammar

    SINGLE_COMMENT
    MULTI_COMMENT
    NEW_LINE


State 21 conflicts: 1 shift/reduce
State 34 conflicts: 1 shift/reduce
State 37 conflicts: 1 shift/reduce
State 38 conflicts: 2 shift/reduce
State 105 conflicts: 1 shift/reduce
State 106 conflicts: 1 shift/reduce
State 107 conflicts: 2 shift/reduce
State 108 conflicts: 2 shift/reduce
State 109 conflicts: 2 shift/reduce
State 110 conflicts: 2 shift/reduce
State 144 conflicts: 1 shift/reduce


Grammar

    0 $accept: translational_unit $end

    1 primary_expression: ID
    2                   | INT_CONST
    3                   | CHAR_CONST
    4                   | STRING_CONST
    5                   | LPARAN expression RPARAN

    6 postfix_expression: primary_expression
    7                   | postfix_expression LSQBRACKET expression RSQBRACKET
    8                   | postfix_expression LPARAN argument_expression_list_opt RPARAN
    9                   | postfix_expression ARROW identifier

   10 identifier_opt: ε
   11               | identifier

   12 identifier: ID

   13 argument_expression_list_opt: ε
   14                             | argument_expression_list

   15 argument_expression_list: assignment_expression
   16                         | argument_expression_list COMMA assignment_expression

   17 unary_expression: postfix_expression
   18                 | unary_operator unary_expression

   19 unary_operator: BIT_AND
   20               | MULT
   21               | PLUS
   22               | SUB
   23               | LOG_NOT

   24 multiplicative_expression: unary_expression
   25                          | multiplicative_expression MULT unary_expression
   26                          | multiplicative_expression DIV unary_expression
   27                          | multiplicative_expression MOD unary_expression

   28 additive_expression: multiplicative_expression
   29                    | additive_expression PLUS multiplicative_expression
   30                    | additive_expression SUB multiplicative_expression

   31 relational_expression: additive_expression
   32                      | relational_expression LESS additive_expression
   33                      | relational_expression GREATER additive_expression
   34                      | relational_expression LESSEQ additive_expression
   35                      | relational_expression GREATEREQ additive_expression

   36 equality_expression: relational_expression
   37                    | equality_expression EQUALS relational_expression
   38                    | equality_expression NOTEQ relational_expression

   39 logical_and_expression: equality_expression
   40                       | logical_and_expression LOG_AND equality_expression

   41 logical_or_expression: logical_and_expression
   42                      | logical_or_expression LOG_OR logical_and_expression

   43 conditional_expression: logical_or_expression
   44                       | logical_or_expression QUES expression COLON conditional_expression

   45 assignment_expression: conditional_expression
   46                      | unary_expression ASSIGN assignment_expression

   47 expression: assignment_expression

   48 declaration: type_specifier init_declarator

   49 init_declarator: declarator
   50                | declarator ASSIGN initializer

   51 type_specifier: VOID
   52               | CHAR
   53               | INT

   54 declarator: pointer_opt direct_declarator

   55 pointer_opt: ε
   56            | pointer

   57 direct_declarator: identifier
   58                  | identifier LSQBRACKET interger_constant RSQBRACKET
   59                  | identifier LPARAN parameter_list_opt RPARAN

   60 interger_constant: INT_CONST

   61 pointer: MULT

   62 parameter_list_opt: ε
   63                   | parameter_list

   64 parameter_list: parameter_declaration
   65               | parameter_list COMMA parameter_declaration

   66 parameter_declaration: type_specifier pointer_opt identifier_opt

   67 initializer: assignment_expression

   68 statement: compound_statement
   69          | expression_statement
   70          | selection_statement
   71          | iteration_statement
   72          | jump_statement

   73 compound_statement: LBRACE block_item_list_opt RBRACE

   74 block_item_list_opt: ε
   75                    | block_item_list

   76 block_item_list: block_item
   77                | block_item_list block_item

   78 block_item: declaration
   79           | statement

   80 expression_statement: expression_opt SEMICOLON

   81 expression_opt: ε
   82               | expression

   83 selection_statement: IF LPARAN expression RPARAN statement
   84                    | IF LPARAN expression RPARAN statement ELSE statement

   85 iteration_statement: FOR LPARAN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPARAN statement
   86                    | FOR LPARAN declaration expression_opt SEMICOLON expression_opt RPARAN statement

   87 jump_statement: RETURN expression_opt SEMICOLON

   88 translational_unit: external_declaration

   89 external_declaration: function_definition
   90                     | declaration

   91 function_definition: type_specifier declarator declaration_list_opt compound_statement

   92 declaration_list_opt: ε
   93                     | declaration_list

   94 declaration_list: declaration
   95                 | declaration_list declaration


Terminals, with rules where they appear

    $end (0) 0
    CHAR (10) 52
    ELSE (11) 84
    FOR (12) 85 86
    IF (13) 83 84
    INT (14) 53
    RETURN (15) 87
    VOID (16) 51
    ID (17) 1 12
    INT_CONST (18) 2 60
    CHAR_CONST (19) 3
    STRING_CONST (20) 4
    LSQBRACKET (21) 7 58
    RSQBRACKET (22) 7 58
    LBRACE (23) 73
    RBRACE (24) 73
    LPARAN (25) 5 8 59 83 84 85 86
    RPARAN (26) 5 8 59 83 84 85 86
    ARROW (27) 9
    BIT_AND (28) 19
    PLUS (29) 21 29
    SUB (30) 22 30
    MULT (31) 20 25 61
    DIV (32) 26
    MOD (33) 27
    LOG_NOT (34) 23
    LOG_AND (35) 40
    LOG_OR (36) 42
    LESS (37) 32
    GREATER (38) 33
    LESSEQ (39) 34
    GREATEREQ (40) 35
    EQUALS (41) 37
    NOTEQ (42) 38
    QUES (43) 44
    COLON (44) 44
    SEMICOLON (45) 80 85 86 87
    ASSIGN (46) 46 50
    COMMA (47) 16 65
    SINGLE_COMMENT (48)
    MULTI_COMMENT (49)
    NEW_LINE (50)
    error (256)


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    primary_expression (45)
        on left: 1 2 3 4 5
        on right: 6
    postfix_expression (46)
        on left: 6 7 8 9
        on right: 7 8 9 17
    identifier_opt (47)
        on left: 10 11
        on right: 66
    identifier (48)
        on left: 12
        on right: 9 11 57 58 59
    argument_expression_list_opt (49)
        on left: 13 14
        on right: 8
    argument_expression_list (50)
        on left: 15 16
        on right: 14 16
    unary_expression (51)
        on left: 17 18
        on right: 18 24 25 26 27 46
    unary_operator (52)
        on left: 19 20 21 22 23
        on right: 18
    multiplicative_expression (53)
        on left: 24 25 26 27
        on right: 25 26 27 28 29 30
    additive_expression (54)
        on left: 28 29 30
        on right: 29 30 31 32 33 34 35
    relational_expression (55)
        on left: 31 32 33 34 35
        on right: 32 33 34 35 36 37 38
    equality_expression (56)
        on left: 36 37 38
        on right: 37 38 39 40
    logical_and_expression (57)
        on left: 39 40
        on right: 40 41 42
    logical_or_expression (58)
        on left: 41 42
        on right: 42 43 44
    conditional_expression (59)
        on left: 43 44
        on right: 44 45
    assignment_expression (60)
        on left: 45 46
        on right: 15 16 46 47 67
    expression (61)
        on left: 47
        on right: 5 7 44 82 83 84
    declaration (62)
        on left: 48
        on right: 78 86 90 94 95
    init_declarator (63)
        on left: 49 50
        on right: 48
    type_specifier (64)
        on left: 51 52 53
        on right: 48 66 91
    declarator (65)
        on left: 54
        on right: 49 50 91
    pointer_opt (66)
        on left: 55 56
        on right: 54 66
    direct_declarator (67)
        on left: 57 58 59
        on right: 54
    interger_constant (68)
        on left: 60
        on right: 58
    pointer (69)
        on left: 61
        on right: 56
    parameter_list_opt (70)
        on left: 62 63
        on right: 59
    parameter_list (71)
        on left: 64 65
        on right: 63 65
    parameter_declaration (72)
        on left: 66
        on right: 64 65
    initializer (73)
        on left: 67
        on right: 50
    statement (74)
        on left: 68 69 70 71 72
        on right: 79 83 84 85 86
    compound_statement (75)
        on left: 73
        on right: 68 91
    block_item_list_opt (76)
        on left: 74 75
        on right: 73
    block_item_list (77)
        on left: 76 77
        on right: 75 77
    block_item (78)
        on left: 78 79
        on right: 76 77
    expression_statement (79)
        on left: 80
        on right: 69
    expression_opt (80)
        on left: 81 82
        on right: 80 85 86 87
    selection_statement (81)
        on left: 83 84
        on right: 70
    iteration_statement (82)
        on left: 85 86
        on right: 71
    jump_statement (83)
        on left: 87
        on right: 72
    translational_unit (84)
        on left: 88
        on right: 0
    external_declaration (85)
        on left: 89 90
        on right: 88
    function_definition (86)
        on left: 91
        on right: 89
    declaration_list_opt (87)
        on left: 92 93
        on right: 91
    declaration_list (88)
        on left: 94 95
        on right: 93 95


State 0

    0 $accept: • translational_unit $end

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    declaration           go to state 4
    type_specifier        go to state 5
    translational_unit    go to state 6
    external_declaration  go to state 7
    function_definition   go to state 8


State 1

   52 type_specifier: CHAR •

    $default  reduce using rule 52 (type_specifier)


State 2

   53 type_specifier: INT •

    $default  reduce using rule 53 (type_specifier)


State 3

   51 type_specifier: VOID •

    $default  reduce using rule 51 (type_specifier)


State 4

   90 external_declaration: declaration •

    $default  reduce using rule 90 (external_declaration)


State 5

   48 declaration: type_specifier • init_declarator
   91 function_definition: type_specifier • declarator declaration_list_opt compound_statement

    MULT  shift, and go to state 9

    $default  reduce using rule 55 (pointer_opt)

    init_declarator  go to state 10
    declarator       go to state 11
    pointer_opt      go to state 12
    pointer          go to state 13


State 6

    0 $accept: translational_unit • $end

    $end  shift, and go to state 14


State 7

   88 translational_unit: external_declaration •

    $default  reduce using rule 88 (translational_unit)


State 8

   89 external_declaration: function_definition •

    $default  reduce using rule 89 (external_declaration)


State 9

   61 pointer: MULT •

    $default  reduce using rule 61 (pointer)


State 10

   48 declaration: type_specifier init_declarator •

    $default  reduce using rule 48 (declaration)


State 11

   49 init_declarator: declarator •
   50                | declarator • ASSIGN initializer
   91 function_definition: type_specifier declarator • declaration_list_opt compound_statement

    CHAR    shift, and go to state 1
    INT     shift, and go to state 2
    VOID    shift, and go to state 3
    ASSIGN  shift, and go to state 15

    LBRACE    reduce using rule 92 (declaration_list_opt)
    $default  reduce using rule 49 (init_declarator)

    declaration           go to state 16
    type_specifier        go to state 17
    declaration_list_opt  go to state 18
    declaration_list      go to state 19


State 12

   54 declarator: pointer_opt • direct_declarator

    ID  shift, and go to state 20

    identifier         go to state 21
    direct_declarator  go to state 22


State 13

   56 pointer_opt: pointer •

    $default  reduce using rule 56 (pointer_opt)


State 14

    0 $accept: translational_unit $end •

    $default  accept


State 15

   50 init_declarator: declarator ASSIGN • initializer

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 44
    initializer                go to state 45


State 16

   94 declaration_list: declaration •

    $default  reduce using rule 94 (declaration_list)


State 17

   48 declaration: type_specifier • init_declarator

    MULT  shift, and go to state 9

    $default  reduce using rule 55 (pointer_opt)

    init_declarator  go to state 10
    declarator       go to state 46
    pointer_opt      go to state 12
    pointer          go to state 13


State 18

   91 function_definition: type_specifier declarator declaration_list_opt • compound_statement

    LBRACE  shift, and go to state 47

    compound_statement  go to state 48


State 19

   93 declaration_list_opt: declaration_list •
   95 declaration_list: declaration_list • declaration

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    $default  reduce using rule 93 (declaration_list_opt)

    declaration     go to state 49
    type_specifier  go to state 17


State 20

   12 identifier: ID •

    $default  reduce using rule 12 (identifier)


State 21

   57 direct_declarator: identifier •
   58                  | identifier • LSQBRACKET interger_constant RSQBRACKET
   59                  | identifier • LPARAN parameter_list_opt RPARAN

    LSQBRACKET  shift, and go to state 50
    LPARAN      shift, and go to state 51

    LPARAN    [reduce using rule 57 (direct_declarator)]
    $default  reduce using rule 57 (direct_declarator)


State 22

   54 declarator: pointer_opt direct_declarator •

    $default  reduce using rule 54 (declarator)


State 23

    1 primary_expression: ID •

    $default  reduce using rule 1 (primary_expression)


State 24

    2 primary_expression: INT_CONST •

    $default  reduce using rule 2 (primary_expression)


State 25

    3 primary_expression: CHAR_CONST •

    $default  reduce using rule 3 (primary_expression)


State 26

    4 primary_expression: STRING_CONST •

    $default  reduce using rule 4 (primary_expression)


State 27

    5 primary_expression: LPARAN • expression RPARAN

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 53


State 28

   19 unary_operator: BIT_AND •

    $default  reduce using rule 19 (unary_operator)


State 29

   21 unary_operator: PLUS •

    $default  reduce using rule 21 (unary_operator)


State 30

   22 unary_operator: SUB •

    $default  reduce using rule 22 (unary_operator)


State 31

   20 unary_operator: MULT •

    $default  reduce using rule 20 (unary_operator)


State 32

   23 unary_operator: LOG_NOT •

    $default  reduce using rule 23 (unary_operator)


State 33

    6 postfix_expression: primary_expression •

    $default  reduce using rule 6 (postfix_expression)


State 34

    7 postfix_expression: postfix_expression • LSQBRACKET expression RSQBRACKET
    8                   | postfix_expression • LPARAN argument_expression_list_opt RPARAN
    9                   | postfix_expression • ARROW identifier
   17 unary_expression: postfix_expression •

    LSQBRACKET  shift, and go to state 54
    LPARAN      shift, and go to state 55
    ARROW       shift, and go to state 56

    LPARAN    [reduce using rule 17 (unary_expression)]
    $default  reduce using rule 17 (unary_expression)


State 35

   24 multiplicative_expression: unary_expression •
   46 assignment_expression: unary_expression • ASSIGN assignment_expression

    ASSIGN  shift, and go to state 57

    $default  reduce using rule 24 (multiplicative_expression)


State 36

   18 unary_expression: unary_operator • unary_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression  go to state 33
    postfix_expression  go to state 34
    unary_expression    go to state 58
    unary_operator      go to state 36


State 37

   25 multiplicative_expression: multiplicative_expression • MULT unary_expression
   26                          | multiplicative_expression • DIV unary_expression
   27                          | multiplicative_expression • MOD unary_expression
   28 additive_expression: multiplicative_expression •

    MULT  shift, and go to state 59
    DIV   shift, and go to state 60
    MOD   shift, and go to state 61

    MULT      [reduce using rule 28 (additive_expression)]
    $default  reduce using rule 28 (additive_expression)


State 38

   29 additive_expression: additive_expression • PLUS multiplicative_expression
   30                    | additive_expression • SUB multiplicative_expression
   31 relational_expression: additive_expression •

    PLUS  shift, and go to state 62
    SUB   shift, and go to state 63

    PLUS      [reduce using rule 31 (relational_expression)]
    SUB       [reduce using rule 31 (relational_expression)]
    $default  reduce using rule 31 (relational_expression)


State 39

   32 relational_expression: relational_expression • LESS additive_expression
   33                      | relational_expression • GREATER additive_expression
   34                      | relational_expression • LESSEQ additive_expression
   35                      | relational_expression • GREATEREQ additive_expression
   36 equality_expression: relational_expression •

    LESS       shift, and go to state 64
    GREATER    shift, and go to state 65
    LESSEQ     shift, and go to state 66
    GREATEREQ  shift, and go to state 67

    $default  reduce using rule 36 (equality_expression)


State 40

   37 equality_expression: equality_expression • EQUALS relational_expression
   38                    | equality_expression • NOTEQ relational_expression
   39 logical_and_expression: equality_expression •

    EQUALS  shift, and go to state 68
    NOTEQ   shift, and go to state 69

    $default  reduce using rule 39 (logical_and_expression)


State 41

   40 logical_and_expression: logical_and_expression • LOG_AND equality_expression
   41 logical_or_expression: logical_and_expression •

    LOG_AND  shift, and go to state 70

    $default  reduce using rule 41 (logical_or_expression)


State 42

   42 logical_or_expression: logical_or_expression • LOG_OR logical_and_expression
   43 conditional_expression: logical_or_expression •
   44                       | logical_or_expression • QUES expression COLON conditional_expression

    LOG_OR  shift, and go to state 71
    QUES    shift, and go to state 72

    $default  reduce using rule 43 (conditional_expression)


State 43

   45 assignment_expression: conditional_expression •

    $default  reduce using rule 45 (assignment_expression)


State 44

   67 initializer: assignment_expression •

    $default  reduce using rule 67 (initializer)


State 45

   50 init_declarator: declarator ASSIGN initializer •

    $default  reduce using rule 50 (init_declarator)


State 46

   49 init_declarator: declarator •
   50                | declarator • ASSIGN initializer

    ASSIGN  shift, and go to state 15

    $default  reduce using rule 49 (init_declarator)


State 47

   73 compound_statement: LBRACE • block_item_list_opt RBRACE

    CHAR          shift, and go to state 1
    FOR           shift, and go to state 73
    IF            shift, and go to state 74
    INT           shift, and go to state 2
    RETURN        shift, and go to state 75
    VOID          shift, and go to state 3
    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LBRACE        shift, and go to state 47
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    SEMICOLON  reduce using rule 81 (expression_opt)
    $default   reduce using rule 74 (block_item_list_opt)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 76
    declaration                go to state 77
    type_specifier             go to state 17
    statement                  go to state 78
    compound_statement         go to state 79
    block_item_list_opt        go to state 80
    block_item_list            go to state 81
    block_item                 go to state 82
    expression_statement       go to state 83
    expression_opt             go to state 84
    selection_statement        go to state 85
    iteration_statement        go to state 86
    jump_statement             go to state 87


State 48

   91 function_definition: type_specifier declarator declaration_list_opt compound_statement •

    $default  reduce using rule 91 (function_definition)


State 49

   95 declaration_list: declaration_list declaration •

    $default  reduce using rule 95 (declaration_list)


State 50

   58 direct_declarator: identifier LSQBRACKET • interger_constant RSQBRACKET

    INT_CONST  shift, and go to state 88

    interger_constant  go to state 89


State 51

   59 direct_declarator: identifier LPARAN • parameter_list_opt RPARAN

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    $default  reduce using rule 62 (parameter_list_opt)

    type_specifier         go to state 90
    parameter_list_opt     go to state 91
    parameter_list         go to state 92
    parameter_declaration  go to state 93


State 52

   47 expression: assignment_expression •

    $default  reduce using rule 47 (expression)


State 53

    5 primary_expression: LPARAN expression • RPARAN

    RPARAN  shift, and go to state 94


State 54

    7 postfix_expression: postfix_expression LSQBRACKET • expression RSQBRACKET

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 95


State 55

    8 postfix_expression: postfix_expression LPARAN • argument_expression_list_opt RPARAN

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    $default  reduce using rule 13 (argument_expression_list_opt)

    primary_expression            go to state 33
    postfix_expression            go to state 34
    argument_expression_list_opt  go to state 96
    argument_expression_list      go to state 97
    unary_expression              go to state 35
    unary_operator                go to state 36
    multiplicative_expression     go to state 37
    additive_expression           go to state 38
    relational_expression         go to state 39
    equality_expression           go to state 40
    logical_and_expression        go to state 41
    logical_or_expression         go to state 42
    conditional_expression        go to state 43
    assignment_expression         go to state 98


State 56

    9 postfix_expression: postfix_expression ARROW • identifier

    ID  shift, and go to state 20

    identifier  go to state 99


State 57

   46 assignment_expression: unary_expression ASSIGN • assignment_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 100


State 58

   18 unary_expression: unary_operator unary_expression •

    $default  reduce using rule 18 (unary_expression)


State 59

   25 multiplicative_expression: multiplicative_expression MULT • unary_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression  go to state 33
    postfix_expression  go to state 34
    unary_expression    go to state 101
    unary_operator      go to state 36


State 60

   26 multiplicative_expression: multiplicative_expression DIV • unary_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression  go to state 33
    postfix_expression  go to state 34
    unary_expression    go to state 102
    unary_operator      go to state 36


State 61

   27 multiplicative_expression: multiplicative_expression MOD • unary_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression  go to state 33
    postfix_expression  go to state 34
    unary_expression    go to state 103
    unary_operator      go to state 36


State 62

   29 additive_expression: additive_expression PLUS • multiplicative_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 104
    unary_operator             go to state 36
    multiplicative_expression  go to state 105


State 63

   30 additive_expression: additive_expression SUB • multiplicative_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 104
    unary_operator             go to state 36
    multiplicative_expression  go to state 106


State 64

   32 relational_expression: relational_expression LESS • additive_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 104
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 107


State 65

   33 relational_expression: relational_expression GREATER • additive_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 104
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 108


State 66

   34 relational_expression: relational_expression LESSEQ • additive_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 104
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 109


State 67

   35 relational_expression: relational_expression GREATEREQ • additive_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 104
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 110


State 68

   37 equality_expression: equality_expression EQUALS • relational_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 104
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 111


State 69

   38 equality_expression: equality_expression NOTEQ • relational_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 104
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 112


State 70

   40 logical_and_expression: logical_and_expression LOG_AND • equality_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 104
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 113


State 71

   42 logical_or_expression: logical_or_expression LOG_OR • logical_and_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 104
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 114


State 72

   44 conditional_expression: logical_or_expression QUES • expression COLON conditional_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 115


State 73

   85 iteration_statement: FOR • LPARAN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPARAN statement
   86                    | FOR • LPARAN declaration expression_opt SEMICOLON expression_opt RPARAN statement

    LPARAN  shift, and go to state 116


State 74

   83 selection_statement: IF • LPARAN expression RPARAN statement
   84                    | IF • LPARAN expression RPARAN statement ELSE statement

    LPARAN  shift, and go to state 117


State 75

   87 jump_statement: RETURN • expression_opt SEMICOLON

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    $default  reduce using rule 81 (expression_opt)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 76
    expression_opt             go to state 118


State 76

   82 expression_opt: expression •

    $default  reduce using rule 82 (expression_opt)


State 77

   78 block_item: declaration •

    $default  reduce using rule 78 (block_item)


State 78

   79 block_item: statement •

    $default  reduce using rule 79 (block_item)


State 79

   68 statement: compound_statement •

    $default  reduce using rule 68 (statement)


State 80

   73 compound_statement: LBRACE block_item_list_opt • RBRACE

    RBRACE  shift, and go to state 119


State 81

   75 block_item_list_opt: block_item_list •
   77 block_item_list: block_item_list • block_item

    CHAR          shift, and go to state 1
    FOR           shift, and go to state 73
    IF            shift, and go to state 74
    INT           shift, and go to state 2
    RETURN        shift, and go to state 75
    VOID          shift, and go to state 3
    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LBRACE        shift, and go to state 47
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    SEMICOLON  reduce using rule 81 (expression_opt)
    $default   reduce using rule 75 (block_item_list_opt)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 76
    declaration                go to state 77
    type_specifier             go to state 17
    statement                  go to state 78
    compound_statement         go to state 79
    block_item                 go to state 120
    expression_statement       go to state 83
    expression_opt             go to state 84
    selection_statement        go to state 85
    iteration_statement        go to state 86
    jump_statement             go to state 87


State 82

   76 block_item_list: block_item •

    $default  reduce using rule 76 (block_item_list)


State 83

   69 statement: expression_statement •

    $default  reduce using rule 69 (statement)


State 84

   80 expression_statement: expression_opt • SEMICOLON

    SEMICOLON  shift, and go to state 121


State 85

   70 statement: selection_statement •

    $default  reduce using rule 70 (statement)


State 86

   71 statement: iteration_statement •

    $default  reduce using rule 71 (statement)


State 87

   72 statement: jump_statement •

    $default  reduce using rule 72 (statement)


State 88

   60 interger_constant: INT_CONST •

    $default  reduce using rule 60 (interger_constant)


State 89

   58 direct_declarator: identifier LSQBRACKET interger_constant • RSQBRACKET

    RSQBRACKET  shift, and go to state 122


State 90

   66 parameter_declaration: type_specifier • pointer_opt identifier_opt

    MULT  shift, and go to state 9

    $default  reduce using rule 55 (pointer_opt)

    pointer_opt  go to state 123
    pointer      go to state 13


State 91

   59 direct_declarator: identifier LPARAN parameter_list_opt • RPARAN

    RPARAN  shift, and go to state 124


State 92

   63 parameter_list_opt: parameter_list •
   65 parameter_list: parameter_list • COMMA parameter_declaration

    COMMA  shift, and go to state 125

    $default  reduce using rule 63 (parameter_list_opt)


State 93

   64 parameter_list: parameter_declaration •

    $default  reduce using rule 64 (parameter_list)


State 94

    5 primary_expression: LPARAN expression RPARAN •

    $default  reduce using rule 5 (primary_expression)


State 95

    7 postfix_expression: postfix_expression LSQBRACKET expression • RSQBRACKET

    RSQBRACKET  shift, and go to state 126


State 96

    8 postfix_expression: postfix_expression LPARAN argument_expression_list_opt • RPARAN

    RPARAN  shift, and go to state 127


State 97

   14 argument_expression_list_opt: argument_expression_list •
   16 argument_expression_list: argument_expression_list • COMMA assignment_expression

    COMMA  shift, and go to state 128

    $default  reduce using rule 14 (argument_expression_list_opt)


State 98

   15 argument_expression_list: assignment_expression •

    $default  reduce using rule 15 (argument_expression_list)


State 99

    9 postfix_expression: postfix_expression ARROW identifier •

    $default  reduce using rule 9 (postfix_expression)


State 100

   46 assignment_expression: unary_expression ASSIGN assignment_expression •

    $default  reduce using rule 46 (assignment_expression)


State 101

   25 multiplicative_expression: multiplicative_expression MULT unary_expression •

    $default  reduce using rule 25 (multiplicative_expression)


State 102

   26 multiplicative_expression: multiplicative_expression DIV unary_expression •

    $default  reduce using rule 26 (multiplicative_expression)


State 103

   27 multiplicative_expression: multiplicative_expression MOD unary_expression •

    $default  reduce using rule 27 (multiplicative_expression)


State 104

   24 multiplicative_expression: unary_expression •

    $default  reduce using rule 24 (multiplicative_expression)


State 105

   25 multiplicative_expression: multiplicative_expression • MULT unary_expression
   26                          | multiplicative_expression • DIV unary_expression
   27                          | multiplicative_expression • MOD unary_expression
   29 additive_expression: additive_expression PLUS multiplicative_expression •

    MULT  shift, and go to state 59
    DIV   shift, and go to state 60
    MOD   shift, and go to state 61

    MULT      [reduce using rule 29 (additive_expression)]
    $default  reduce using rule 29 (additive_expression)


State 106

   25 multiplicative_expression: multiplicative_expression • MULT unary_expression
   26                          | multiplicative_expression • DIV unary_expression
   27                          | multiplicative_expression • MOD unary_expression
   30 additive_expression: additive_expression SUB multiplicative_expression •

    MULT  shift, and go to state 59
    DIV   shift, and go to state 60
    MOD   shift, and go to state 61

    MULT      [reduce using rule 30 (additive_expression)]
    $default  reduce using rule 30 (additive_expression)


State 107

   29 additive_expression: additive_expression • PLUS multiplicative_expression
   30                    | additive_expression • SUB multiplicative_expression
   32 relational_expression: relational_expression LESS additive_expression •

    PLUS  shift, and go to state 62
    SUB   shift, and go to state 63

    PLUS      [reduce using rule 32 (relational_expression)]
    SUB       [reduce using rule 32 (relational_expression)]
    $default  reduce using rule 32 (relational_expression)


State 108

   29 additive_expression: additive_expression • PLUS multiplicative_expression
   30                    | additive_expression • SUB multiplicative_expression
   33 relational_expression: relational_expression GREATER additive_expression •

    PLUS  shift, and go to state 62
    SUB   shift, and go to state 63

    PLUS      [reduce using rule 33 (relational_expression)]
    SUB       [reduce using rule 33 (relational_expression)]
    $default  reduce using rule 33 (relational_expression)


State 109

   29 additive_expression: additive_expression • PLUS multiplicative_expression
   30                    | additive_expression • SUB multiplicative_expression
   34 relational_expression: relational_expression LESSEQ additive_expression •

    PLUS  shift, and go to state 62
    SUB   shift, and go to state 63

    PLUS      [reduce using rule 34 (relational_expression)]
    SUB       [reduce using rule 34 (relational_expression)]
    $default  reduce using rule 34 (relational_expression)


State 110

   29 additive_expression: additive_expression • PLUS multiplicative_expression
   30                    | additive_expression • SUB multiplicative_expression
   35 relational_expression: relational_expression GREATEREQ additive_expression •

    PLUS  shift, and go to state 62
    SUB   shift, and go to state 63

    PLUS      [reduce using rule 35 (relational_expression)]
    SUB       [reduce using rule 35 (relational_expression)]
    $default  reduce using rule 35 (relational_expression)


State 111

   32 relational_expression: relational_expression • LESS additive_expression
   33                      | relational_expression • GREATER additive_expression
   34                      | relational_expression • LESSEQ additive_expression
   35                      | relational_expression • GREATEREQ additive_expression
   37 equality_expression: equality_expression EQUALS relational_expression •

    LESS       shift, and go to state 64
    GREATER    shift, and go to state 65
    LESSEQ     shift, and go to state 66
    GREATEREQ  shift, and go to state 67

    $default  reduce using rule 37 (equality_expression)


State 112

   32 relational_expression: relational_expression • LESS additive_expression
   33                      | relational_expression • GREATER additive_expression
   34                      | relational_expression • LESSEQ additive_expression
   35                      | relational_expression • GREATEREQ additive_expression
   38 equality_expression: equality_expression NOTEQ relational_expression •

    LESS       shift, and go to state 64
    GREATER    shift, and go to state 65
    LESSEQ     shift, and go to state 66
    GREATEREQ  shift, and go to state 67

    $default  reduce using rule 38 (equality_expression)


State 113

   37 equality_expression: equality_expression • EQUALS relational_expression
   38                    | equality_expression • NOTEQ relational_expression
   40 logical_and_expression: logical_and_expression LOG_AND equality_expression •

    EQUALS  shift, and go to state 68
    NOTEQ   shift, and go to state 69

    $default  reduce using rule 40 (logical_and_expression)


State 114

   40 logical_and_expression: logical_and_expression • LOG_AND equality_expression
   42 logical_or_expression: logical_or_expression LOG_OR logical_and_expression •

    LOG_AND  shift, and go to state 70

    $default  reduce using rule 42 (logical_or_expression)


State 115

   44 conditional_expression: logical_or_expression QUES expression • COLON conditional_expression

    COLON  shift, and go to state 129


State 116

   85 iteration_statement: FOR LPARAN • expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPARAN statement
   86                    | FOR LPARAN • declaration expression_opt SEMICOLON expression_opt RPARAN statement

    CHAR          shift, and go to state 1
    INT           shift, and go to state 2
    VOID          shift, and go to state 3
    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    $default  reduce using rule 81 (expression_opt)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 76
    declaration                go to state 130
    type_specifier             go to state 17
    expression_opt             go to state 131


State 117

   83 selection_statement: IF LPARAN • expression RPARAN statement
   84                    | IF LPARAN • expression RPARAN statement ELSE statement

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 132


State 118

   87 jump_statement: RETURN expression_opt • SEMICOLON

    SEMICOLON  shift, and go to state 133


State 119

   73 compound_statement: LBRACE block_item_list_opt RBRACE •

    $default  reduce using rule 73 (compound_statement)


State 120

   77 block_item_list: block_item_list block_item •

    $default  reduce using rule 77 (block_item_list)


State 121

   80 expression_statement: expression_opt SEMICOLON •

    $default  reduce using rule 80 (expression_statement)


State 122

   58 direct_declarator: identifier LSQBRACKET interger_constant RSQBRACKET •

    $default  reduce using rule 58 (direct_declarator)


State 123

   66 parameter_declaration: type_specifier pointer_opt • identifier_opt

    ID  shift, and go to state 20

    $default  reduce using rule 10 (identifier_opt)

    identifier_opt  go to state 134
    identifier      go to state 135


State 124

   59 direct_declarator: identifier LPARAN parameter_list_opt RPARAN •

    $default  reduce using rule 59 (direct_declarator)


State 125

   65 parameter_list: parameter_list COMMA • parameter_declaration

    CHAR  shift, and go to state 1
    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    type_specifier         go to state 90
    parameter_declaration  go to state 136


State 126

    7 postfix_expression: postfix_expression LSQBRACKET expression RSQBRACKET •

    $default  reduce using rule 7 (postfix_expression)


State 127

    8 postfix_expression: postfix_expression LPARAN argument_expression_list_opt RPARAN •

    $default  reduce using rule 8 (postfix_expression)


State 128

   16 argument_expression_list: argument_expression_list COMMA • assignment_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 137


State 129

   44 conditional_expression: logical_or_expression QUES expression COLON • conditional_expression

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 104
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 138


State 130

   86 iteration_statement: FOR LPARAN declaration • expression_opt SEMICOLON expression_opt RPARAN statement

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    $default  reduce using rule 81 (expression_opt)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 76
    expression_opt             go to state 139


State 131

   85 iteration_statement: FOR LPARAN expression_opt • SEMICOLON expression_opt SEMICOLON expression_opt RPARAN statement

    SEMICOLON  shift, and go to state 140


State 132

   83 selection_statement: IF LPARAN expression • RPARAN statement
   84                    | IF LPARAN expression • RPARAN statement ELSE statement

    RPARAN  shift, and go to state 141


State 133

   87 jump_statement: RETURN expression_opt SEMICOLON •

    $default  reduce using rule 87 (jump_statement)


State 134

   66 parameter_declaration: type_specifier pointer_opt identifier_opt •

    $default  reduce using rule 66 (parameter_declaration)


State 135

   11 identifier_opt: identifier •

    $default  reduce using rule 11 (identifier_opt)


State 136

   65 parameter_list: parameter_list COMMA parameter_declaration •

    $default  reduce using rule 65 (parameter_list)


State 137

   16 argument_expression_list: argument_expression_list COMMA assignment_expression •

    $default  reduce using rule 16 (argument_expression_list)


State 138

   44 conditional_expression: logical_or_expression QUES expression COLON conditional_expression •

    $default  reduce using rule 44 (conditional_expression)


State 139

   86 iteration_statement: FOR LPARAN declaration expression_opt • SEMICOLON expression_opt RPARAN statement

    SEMICOLON  shift, and go to state 142


State 140

   85 iteration_statement: FOR LPARAN expression_opt SEMICOLON • expression_opt SEMICOLON expression_opt RPARAN statement

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    $default  reduce using rule 81 (expression_opt)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 76
    expression_opt             go to state 143


State 141

   83 selection_statement: IF LPARAN expression RPARAN • statement
   84                    | IF LPARAN expression RPARAN • statement ELSE statement

    FOR           shift, and go to state 73
    IF            shift, and go to state 74
    RETURN        shift, and go to state 75
    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LBRACE        shift, and go to state 47
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    $default  reduce using rule 81 (expression_opt)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 76
    statement                  go to state 144
    compound_statement         go to state 79
    expression_statement       go to state 83
    expression_opt             go to state 84
    selection_statement        go to state 85
    iteration_statement        go to state 86
    jump_statement             go to state 87


State 142

   86 iteration_statement: FOR LPARAN declaration expression_opt SEMICOLON • expression_opt RPARAN statement

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    $default  reduce using rule 81 (expression_opt)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 76
    expression_opt             go to state 145


State 143

   85 iteration_statement: FOR LPARAN expression_opt SEMICOLON expression_opt • SEMICOLON expression_opt RPARAN statement

    SEMICOLON  shift, and go to state 146


State 144

   83 selection_statement: IF LPARAN expression RPARAN statement •
   84                    | IF LPARAN expression RPARAN statement • ELSE statement

    ELSE  shift, and go to state 147

    ELSE      [reduce using rule 83 (selection_statement)]
    $default  reduce using rule 83 (selection_statement)


State 145

   86 iteration_statement: FOR LPARAN declaration expression_opt SEMICOLON expression_opt • RPARAN statement

    RPARAN  shift, and go to state 148


State 146

   85 iteration_statement: FOR LPARAN expression_opt SEMICOLON expression_opt SEMICOLON • expression_opt RPARAN statement

    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    $default  reduce using rule 81 (expression_opt)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 76
    expression_opt             go to state 149


State 147

   84 selection_statement: IF LPARAN expression RPARAN statement ELSE • statement

    FOR           shift, and go to state 73
    IF            shift, and go to state 74
    RETURN        shift, and go to state 75
    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LBRACE        shift, and go to state 47
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    $default  reduce using rule 81 (expression_opt)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 76
    statement                  go to state 150
    compound_statement         go to state 79
    expression_statement       go to state 83
    expression_opt             go to state 84
    selection_statement        go to state 85
    iteration_statement        go to state 86
    jump_statement             go to state 87


State 148

   86 iteration_statement: FOR LPARAN declaration expression_opt SEMICOLON expression_opt RPARAN • statement

    FOR           shift, and go to state 73
    IF            shift, and go to state 74
    RETURN        shift, and go to state 75
    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LBRACE        shift, and go to state 47
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    $default  reduce using rule 81 (expression_opt)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 76
    statement                  go to state 151
    compound_statement         go to state 79
    expression_statement       go to state 83
    expression_opt             go to state 84
    selection_statement        go to state 85
    iteration_statement        go to state 86
    jump_statement             go to state 87


State 149

   85 iteration_statement: FOR LPARAN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt • RPARAN statement

    RPARAN  shift, and go to state 152


State 150

   84 selection_statement: IF LPARAN expression RPARAN statement ELSE statement •

    $default  reduce using rule 84 (selection_statement)


State 151

   86 iteration_statement: FOR LPARAN declaration expression_opt SEMICOLON expression_opt RPARAN statement •

    $default  reduce using rule 86 (iteration_statement)


State 152

   85 iteration_statement: FOR LPARAN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPARAN • statement

    FOR           shift, and go to state 73
    IF            shift, and go to state 74
    RETURN        shift, and go to state 75
    ID            shift, and go to state 23
    INT_CONST     shift, and go to state 24
    CHAR_CONST    shift, and go to state 25
    STRING_CONST  shift, and go to state 26
    LBRACE        shift, and go to state 47
    LPARAN        shift, and go to state 27
    BIT_AND       shift, and go to state 28
    PLUS          shift, and go to state 29
    SUB           shift, and go to state 30
    MULT          shift, and go to state 31
    LOG_NOT       shift, and go to state 32

    $default  reduce using rule 81 (expression_opt)

    primary_expression         go to state 33
    postfix_expression         go to state 34
    unary_expression           go to state 35
    unary_operator             go to state 36
    multiplicative_expression  go to state 37
    additive_expression        go to state 38
    relational_expression      go to state 39
    equality_expression        go to state 40
    logical_and_expression     go to state 41
    logical_or_expression      go to state 42
    conditional_expression     go to state 43
    assignment_expression      go to state 52
    expression                 go to state 76
    statement                  go to state 153
    compound_statement         go to state 79
    expression_statement       go to state 83
    expression_opt             go to state 84
    selection_statement        go to state 85
    iteration_statement        go to state 86
    jump_statement             go to state 87


State 153

   85 iteration_statement: FOR LPARAN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPARAN statement •

    $default  reduce using rule 85 (iteration_statement)
